"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[820],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),k=a,m=c["".concat(s,".").concat(k)]||c[k]||d[k]||l;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=k;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},2536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={sidebar_position:2},i="Syntax",o={unversionedId:"syntax",id:"syntax",title:"Syntax",description:"Strings",source:"@site/docs/syntax.mdx",sourceDirName:".",slug:"/syntax",permalink:"/L-Lang/docs/syntax",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/L-Lang/docs/introduction"},next:{title:"Standard library",permalink:"/L-Lang/docs/category/standard-library"}},s={},u=[{value:"Strings",id:"strings",level:2},{value:"Numbers",id:"numbers",level:2},{value:"Booleans",id:"booleans",level:2},{value:"Boolean algebra",id:"boolean-algebra",level:3},{value:"Nil",id:"nil",level:2},{value:"Variables",id:"variables",level:2},{value:"Variable operations",id:"variable-operations",level:3},{value:"Increment",id:"increment",level:4},{value:"Decrement",id:"decrement",level:4},{value:"Plus assign",id:"plus-assign",level:4},{value:"Minus assign",id:"minus-assign",level:4},{value:"Conditionals",id:"conditionals",level:2},{value:"Loops",id:"loops",level:2},{value:"While",id:"while",level:3},{value:"For-each loop",id:"for-each-loop",level:3},{value:"Control flow",id:"control-flow",level:3},{value:"Functions",id:"functions",level:2},{value:"Passing functions to functions",id:"passing-functions-to-functions",level:3},{value:"Currying",id:"currying",level:3},{value:"Lambda functions",id:"lambda-functions",level:3},{value:"Classes",id:"classes",level:2},{value:"Inheritance",id:"inheritance",level:3},{value:"Lists and Iterators",id:"lists-and-iterators",level:3},{value:"Iterable destructuring",id:"iterable-destructuring",level:4},{value:"Iterable slicing",id:"iterable-slicing",level:4}],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"syntax"},"Syntax"),(0,a.kt)("h2",{id:"strings"},"Strings"),(0,a.kt)("p",null,"Text wrapped by quotes is treated as string, f.e. ",(0,a.kt)("inlineCode",{parentName:"p"},'"THIS IS STRING"')),(0,a.kt)("h2",{id:"numbers"},"Numbers"),(0,a.kt)("p",null,'L operates on double-precision numbers, there are no "integers" per se.'),(0,a.kt)("p",null,"Every number will be, well, a number, f.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"42")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"3.14"),"."),(0,a.kt)("h2",{id:"booleans"},"Booleans"),(0,a.kt)("p",null,"True or false - ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"false")),(0,a.kt)("h3",{id:"boolean-algebra"},"Boolean algebra"),(0,a.kt)("p",null,"L has standard set of boolean operators:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"and")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"or")),(0,a.kt)("li",{parentName:"ul"},"not - ",(0,a.kt)("inlineCode",{parentName:"li"},"!")),(0,a.kt)("li",{parentName:"ul"},"less - ",(0,a.kt)("inlineCode",{parentName:"li"},"<")),(0,a.kt)("li",{parentName:"ul"},"greater - ",(0,a.kt)("inlineCode",{parentName:"li"},">")),(0,a.kt)("li",{parentName:"ul"},"equal - ",(0,a.kt)("inlineCode",{parentName:"li"},"==")),(0,a.kt)("li",{parentName:"ul"},"not equal - ",(0,a.kt)("inlineCode",{parentName:"li"},"!=")),(0,a.kt)("li",{parentName:"ul"},"less or equal - ",(0,a.kt)("inlineCode",{parentName:"li"},"<=")),(0,a.kt)("li",{parentName:"ul"},"greater or equal - ",(0,a.kt)("inlineCode",{parentName:"li"},">="))),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var willBeTrue = true or false\nvar willBeFalse = true and false\n\nvar check = willBeTrue and !willBeFalse // true\nvar nope = willBeTrue == willBeFalse // false\n")),(0,a.kt)("h2",{id:"nil"},"Nil"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nil")," - nothing, empty value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var nothing = nil\n")),(0,a.kt)("h2",{id:"variables"},"Variables"),(0,a.kt)("p",null,"Variables holds some values, to be later user or modified.\nVariables looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var identifier = value\n")),(0,a.kt)("p",null,"You can hold everything in variables - strings, numbers, functions (more on functions later) and class instances (more on classes later)."),(0,a.kt)("p",null,"Sometimes you don't want to modify your variables - don't worry, L has vals as well"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val identifier = value\n")),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var text = "test"\nvar number = 12.34\nval youCantChangeMe = ";_;"\n')),(0,a.kt)("h3",{id:"variable-operations"},"Variable operations"),(0,a.kt)("p",null,"Of course, you can re-assign variables ",(0,a.kt)("inlineCode",{parentName:"p"},'text = "other text"'),"."),(0,a.kt)("p",null,"But you can also"),(0,a.kt)("h4",{id:"increment"},"Increment"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"number++")),(0,a.kt)("h4",{id:"decrement"},"Decrement"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"number--")),(0,a.kt)("h4",{id:"plus-assign"},"Plus assign"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"number += 5")),(0,a.kt)("h4",{id:"minus-assign"},"Minus assign"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"number -= 2")),(0,a.kt)("h2",{id:"conditionals"},"Conditionals"),(0,a.kt)("p",null,"You can branch your code based on conditions using ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," statement."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var a = 12\nvar b = 13\n\nif(a == b) {\n  print("equal")\n} else {\n  print("not equal")\n}\n')),(0,a.kt)("p",null,"In if statements, you can use anything from boolean algebra."),(0,a.kt)("h2",{id:"loops"},"Loops"),(0,a.kt)("h3",{id:"while"},"While"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"while(condition) {\n  codeBlock\n}\n")),(0,a.kt)("p",null,"This loop will repeat execution of codeBlock, while condition is true.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var i = 0\nwhile(i < 5) {\n  printLine("WORKING!")\n  i++\n}\n')),(0,a.kt)("h3",{id:"for-each-loop"},"For-each loop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"for(variableName in iterable) {\n  codeBlock\n}\n")),(0,a.kt)("p",null,"For-each loop creates variable and iterates over iterable data-type (f.e. lists or ranges)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"for(i in range(0,5)) {\n    printLine(i)\n}\n")),(0,a.kt)("h3",{id:"control-flow"},"Control flow"),(0,a.kt)("p",null,"You can break out of a loop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"for(i in range(0,5)) {\n    if(i == 3) break\n    printLine(i)\n}\n\n// Will print:\n// 0\n// 1\n// 2\n")),(0,a.kt)("p",null,"You can also skip current loop cycle with ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"for(i in range(0,5)) {\n    if(i == 3) continue\n    printLine(i)\n}\n\n// Will print:\n// 0\n// 1\n// 2\n// 4\n")),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("p",null,"Functions are defined like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fun functionName(arguments) {\n  return expression\n}\n")),(0,a.kt)("p",null,"You can omit return keyword, then function won't return a value."),(0,a.kt)("p",null,"Exemplary functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fun add(a, b) {\n  return a + b\n}\n\nfun doSomethingFun(text) {\n  print(text)\n}\n")),(0,a.kt)("h3",{id:"passing-functions-to-functions"},"Passing functions to functions"),(0,a.kt)("p",null,"You can pass functions to other functions as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fun executeFunction(f) {\n  return f(1)\n}\n\nfun returnNumberPlusOne(number) {\n  return number + 1\n}\n\nprint(executeFunction(returnNumberPlusOne))\n")),(0,a.kt)("h3",{id:"currying"},"Currying"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fun curry(f) {\n    fun f1(a) {\n      fun f2(b) {\n        return f(a, b)\n      }\n\n      return f2\n    }\n\n    return f1\n}\n\nfun sum(a, b) {\n    return a + b\n}\n\nvar curried = curry(sum)\nprint(curried(2)(3))\n")),(0,a.kt)("h3",{id:"lambda-functions"},"Lambda functions"),(0,a.kt)("p",null,"You can create anonymous functions (let's see on example above, we will only change curry function)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fun curryLambda(f) {\n    return fun (a) {\n      return fun (b) {\n        return f(a, b)\n      }\n    }\n}\n")),(0,a.kt)("p",null,"You can also pass lambdas as function arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"someFunction(fun(a) { return a + 1 })\n")),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class Test {\n  init(a, b) {\n    this.a = a\n    this.b = b\n  }\n\n  add() {\n    return this.a + this.b\n  }\n}\n\nval test = Test(1,2)\nprint(test.add())\nprint(test.a)\nprint(test.b)\n\ntest.a = 5\nprint(test.add())\n")),(0,a.kt)("h3",{id:"inheritance"},"Inheritance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'class SuperTest : Test {\n    add() {\n        print("HA HA, I will now add two numbers!")\n        return super.add()\n    }\n}\n\nval superTest = SuperTest(4,2)\nprint(superTest.add())\n')),(0,a.kt)("h3",{id:"lists-and-iterators"},"Lists and Iterators"),(0,a.kt)("p",null,"Lists should be part of Standard Library, but there is handy syntax for lists creation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val list = [1,2,3,4]\n")),(0,a.kt)("h4",{id:"iterable-destructuring"},"Iterable destructuring"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val list = [1,2,3,4]\nval [a,b,c] = list\n\n// a = 1\n// b = 2\n// c = [3,4]\n")),(0,a.kt)("p",null,"It can be used with iterables as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val it = range(0,5)\nval [a,b,c] = it\n\n// a = 0\n// b = 1\n// c = [2,3,4]\n")),(0,a.kt)("h4",{id:"iterable-slicing"},"Iterable slicing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"val it = range(0,5)\n\nprintLine(it[1:3]) // Will print [1,2,3]\nprintLine(it[1:]) // Will print [1,2,3,4]\nprintLine(it[:3]) // Will print [0,1,2]\n\n// First parameter is start index, second is count\n")))}d.isMDXComponent=!0}}]);